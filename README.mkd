GitHubハンズオン資料
====================

この資料は、GitHubのハンズオンを行うための資料です。GitHubを利用する上で
核となるリベースとプルリクエストをメインに開発しています。独習や社内でのGitHubの勉強会などで、自由にご利用ください。
なお、GitHubのベースとなるGitには様々なエッセンスがあり、この資料は網羅するものではありません。他のGit書籍などを併用してご利用ください。
また、ハンズオン資料も受け付けますので、是非プルリクエストを送ってください。

演習1. バグ報告
--------------

作業を行う前に、バグや機能追加の要望を報告しておきましょう。OpenStackでは、LaunchPadにあるトラッカーから報告できます。
その他の一般的なプロジェクトではGitHub上のIssuesトラッカーで管理されていることが多いです。

下記の演習用プロジェクトからバグ報告を行ってみましょう。

※演習後、削除されるので気にせずにどんどん入れてみてください。


* LaunchPad用のトラッキング(OpenStackの場合)
 * https://bugs.launchpad.net/openstack-dummy

* GitHub用の報告
 * このプロジェクトの上の**Issue**から。

----
#### ☆ポイント

バグ報告を行えば、修正方法を探しているうちに誰かが対応してくれるかも知れません。**知っている人がやれば一瞬で治るバグや機能追加も少なくはない**ので、まずはバグ報告を行っておくことをお勧めします。

また、バグ報告によって払い出させるバグID(トラッカーID)を作業用のIDが払い出されます。そのIDを利用して**「コミットやブランチが何に対する作業なのか」を紐づける**ことができます。

英語はあんまり厳密でなく適当でも大丈夫。その代り、**どういうログが出た**のかとか、**どういう画面になった**のかとか、**コードのここがおかしそう**だとか、問題が分かる資料をつけよう。

----

演習2. 作業用リポジトリの作成(フォーク)
------------------------------------
プルリクエストを行う前段として、GitHubでは作業用の自分のリポジトリを作成する必要があります。(**直接cloneしてパッチを投げつけないように注意**!!)

下記の作業を**Webブラウザ**で行います。

1. GitHubにログイン
2. 演習用Novaのリポジトリにアクセス
 * https://github.com/okamototk/nova/
3. フォークボタンを押し、フォーク

これで、あなたの作業用リポジトリができました。[[GitHubのあなたのページ|https://github.com/]]で確かにフォークされていることを確認してください。

演習3. 作業用ブランチを作成(clone/branch)
---------------------------
下記の作業を作業用端末で行います。

### クローン:リポジトリの取得(checkout相当)

1. 適当な作業用ディレクトリに移動
2. cloneコマンドを実行
```
$ git clone https://<username>@github.com/<username>/nova/
```

例えば、mitaというユーザIDの場合、

```
$ git clone https://mita@github.com/mita/nova/
...
$ ls 
nova
```

とすると、リポジトリの複製を取得できます。オフィスなどでHTTPプロキシが邪魔してうまくいかない場合は、下記のようにプロキシの設定をしておくと良いです。

```
$ export https_proxy=http://username:password@proxyhost.xx.xx:8080/
```



リポジトリの取得ができたら、ユーザの設定をしておきます。

```
$ cd nova
$ git config user.name "Mita Akari"
$ git config user.email mita@fujixxx.com
```

これで、リポジトリのセットアップは完了です。

### 作業用ブランチの作成

リポジトリの複製が取得できたら、作業用ブランチを作成します。例えば、12345番のバグを修正する場合、

```
$ cd nova
$ git branch bug/12345        // create branch
$ git branch                  // confirm branch
*master
...
bug/12345
```
とします。bug/xxxxはOpenStackの命名規則です。他のプロジェクトではfix-xxxxという名前かも知れませんので、ブランチ名を確認してから作成すると良いでしょう。なお、OpenStackでは仕様の提案をBlue Printとして記述しますが、Blue Printに対する実装を表す場合は、bp/xxxxという名前になります。

作業用ブランチへの移動は、

```
$ git checkout bug/12345     // change branch
$ git branch                 // confirm branch
*bug/12345                   // * shows current branch.
master
...
```

とします。

これで、作業の準備は完了です。

演習4. 編集、ローカルブランチへの保存
------------------------------

ファイルを編集(バグ修正・機能追加、コメントにラブレターを埋め込む、etc....)します。

編集されたファイルは、次のコマンドで確認できます。

```
$ git status
```

編集が完了したら、ローカルブランチへ保存します。例えば、README.rstファイルを編集した場合を考えます。

```
$ git add README.rst
$ git commit    
```

コミットメッセージは基本英語で書きましょう。(日本語でも使えるけど省略)

※ 複数ファイルをまとめてコミットする場合は、次も可能です。編集されたファイルがすべて、add & commitされます。

```
$ git commit -a
```

gitのコミットメッセージの編集はデフォルトではvimを利用しますが、core.editorを設定しておくと、コミットメッセージを追加するときにお好みのエディタをご利用いただけます。

```
> git config --global core.editor C:/Windows/notepad.exe
```

演習5. 自分のGitHubのリポジトリへ反映(プッシュ)
------------------------------

次のコマンドで、ローカルのブランチの変更をあなたのGitHubのリポジトリへ反映させます。

```
$ git push origin bug/12345
```

プッシュしたら、[[GitHubのリポジトリ|https://github.com]]へ確かに反映されいるか確認しましょう。デフォルトの表示はmasterになっていますので、bug/12345ブランチを確認するのを忘れないようにしてください。なお、一度プッシュしてしまえば、

```
$ git push 
```

とプッシュ先を省略できます。

※ 一般的な開発でGitを共有リポジトリとして利用する場合は、ここでfetch/pullによる同期どマージが必要になりますが、説明を省略します。

演習6. 本家の最新リポジトリの内容を反映(リベース)
--------------------------------------------

フォークしたリポジトリで作業をしている間に、本家のコードが色々と変更になっている可能性があります。本家の最新版のコードをブランチへ取り込む場合は、リベースを行います。(マージでもいいのですがここでは割愛します)

※ リベースが実施する作業のイメージは次のようになります。
![git remase masterが行うこと](http://cdn-ak.f.st-hatena.com/images/fotolife/e/enakai00/20120130/20120130201537.jpg)

まず、本家のリポジトリと同期させるmasterブランチに移動します。

```
$ git checkout master
$ git branch
*master
....
```

次にこのmasterブランチにnovaブランチのmasterブランチの更新を取り込みます。

```
$ git pull https://github.com/okamototk/nova.git  master
```

本家のリポジトリURLを指定が必要なので、注意してください。

これで、ローカルリポジトリのmasterが本家の最新版と同期されました。

作業用のブランチに戻ります。

```
$ git checkout bug/12345
$ git branch
master
*bug/12345
...
```

いよいよリベースを実行します。本家と同期させたmasterのブランチを基点にして、リベースを実行します。

```
$ git rebase master 

...

Falling back to patching base and 3-way merge...
Auto-merging README.txt
CONFLICT (content): Merge conflict in README.txt
Failed to merge in the changes.
Patch failed at 0001 Working.

When you have resolved this problem run "git rebase --continue".
If you would prefer to skip this patch, instead run "git rebase --skip".
To restore the original branch and stop rebasing run "git rebase --abort".
```

コンフリクトが発生しました。コンフリクトがなければ飛ばします。


#### 競合(コンフリクト)

コンフリクトした場所が、下記のようになっています。

```
<<<<<<< HEAD
(Upstream Modification)
=======
(Your Repository Modification)
>>>>>>> Working.
```

編集して修正してください。終了したら、git addで完了したことをgitに通知します。

```
$ git add README.txt
```

マージを続けます。

```
$ git rebase --continue
Applying: Working.
```

コンフリクトが解決しました。コンフリクトが発生すれば、この操作を続けます。

```
$ git --skip
```
で競合が発生したパッチのマージをスキップすることができます。

rebaseを行っている最中で、沢山の競合の解決を繰り返しているうちに、面倒になってくるかもしれません。rebaseを始める前の状態に戻るには、

```
$ git rebase --abort
```

とするとリベースの実行前に戻れます。

演習6: プルリクエストの送信
--------------------------

さて、いよいよプルリクエストのを送信します。[[GitHubのあなたのリポジトリ|https://github.com/]]の右上にある「Pull Request」ボタンを押してください。

* 左の画面がプルリクエストの送付先のリポジトリ/ブランチです
* 右の画面がこれからプルリクエストを送信しようとするあなたのブランチです。

本家のmasterへの送信であれば左の画面はそのままにして、右の画面で今回作成した作業用ブランチbug/12345を指定してください。
「Update Commit Range」を押せばプルリクエストは完了です。

演習7: プルリクエストへのコメントへの対応
-----------------------------------------

プルリクエストが一度で承諾されるとは限りません。開発者からクレームやコメントがつくこともままあります。
クレームがついた場合は、

1. ローカルのブランチのファイルを変更・コミット
2. フォークした自分のリポジトリへプッシュ

することにより、プルリクエストを更新できます。プルリクエスト対象にブランチを指定していれば、プッシュされた内容は自動的に更新されます。プルリクエストを更新したら、プルリクエストのトラッカーにコメントを追記しましょう。
